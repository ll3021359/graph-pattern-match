// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "MBlogHash.h"
#include "HashFile.h"
#include "Cache.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>
#include <server/TThreadedServer.h>
#include "MyStr.h"
#include <boost/interprocess/sync/interprocess_mutex.hpp>


using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::mbloghash;
using boost::interprocess::interprocess_mutex;


class MyHash
{
public:
  unsigned int operator ()(MyStr &s)
  {
    return s.hashFunc();    
  }
};


class MBlogHashHandler : virtual public MBlogHashIf
{
  HashFile<MyStr, MyHash>hf;
  interprocess_mutex hashmutex;
 public:
  MBlogHashHandler() {
    hf.init();
  }

  bool initHash() {

  }

  void hashBlogId(std::vector<std::string> & _return, const std::vector<std::string> & inids) {
    MyStr ms;
    int ret;
    for(int i=0; i<inids.size(); i++)
      {
	ms.init(inids[i]);
	hashmutex.lock();
	ret=hf.putKey(ms);
	hashmutex.unlock();
	if(ret)
	  {
	    _return.push_back(inids[i]);
	  }
      }
    

  }

};

int main(int argc, char **argv) {
  int port = 9084;
  shared_ptr<MBlogHashHandler> handler(new MBlogHashHandler());
  shared_ptr<TProcessor> processor(new MBlogHashProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TThreadedServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

