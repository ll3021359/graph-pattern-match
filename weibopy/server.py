#!/usr/bin/python
#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
sys.path.append('/home/mapred/dylib')
sys.path.append('sendjson-gen-py')
import os,sys,signal,re
import json
import time

from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.protocol import TBinaryProtocol
from thrift.server import TServer


from sendjson.ttypes import *
from sendjson import *

import threading
import Queue

threads=[]
jsonqueue=Queue.Queue()
weiboqueue=Queue.Queue()


class MyLog:
  def __init__(self, adt, itemmax=-1):
    self.itemmax=itemmax
    self.itemnum=0
    self.adt=adt

  def _createfilename(self):
    tm=time.localtime()
    time_str="%02d-%02d-%02d-%02d-%02d"%(tm.tm_mon, tm.tm_mday, tm.tm_hour, tm.tm_min, tm.tm_sec)
    fname = "%s/%s"%(self.logdir,self.logprefix) + time_str
    return fname

  def initFile(self, dir, prefix):
    self.logdir=dir
    self.logprefix=prefix
    self.f=open(self._createfilename(), 'w')
    if self.f == None:
      return -1
    return 0

  def flush(self):
    if self.f is not None:
      self.f.flush()

  def close(self):
    if self.f is not None:
      self.f.close()

  def write(self, cont):
    if self.f == None:
      return
    if self.adt == 1:
      tm=time.localtime()
      time_str="%02d-%02d-%02d-%02d-%02d"%(tm.tm_mon, tm.tm_mday, tm.tm_hour, tm.tm_min, tm.tm_sec)
      self.f.write(time_str+': ')
    self.f.write(cont)
    if self.itemmax > 0:
      self.itemnum += 1
      if self.itemnum == self.itemmax:
        self.f.close()
        self.initFile(self.logdir, self.logprefix)
        self.itemnum = 0
    
    


class weiboinfo:
  pass

class SendJsonHandler:
  def __init__(self):
    pass
  def SendJsonFileName(self, filenames):
    global jsonsemc, jsonsemp, statelog
    for fname in filenames:
      jsonsemp.acquire()
      jsonqueue.put(fname)
      jsonsemc.release()
      statelog.write('Client send json file %s'%(fname)+'\n')
  

def sig_usr1(signo, stack):
  global isexit, jsonsemc, weibosemp, weibosemc
  print "sig_usr1"
  isexit = True
  jsonsemc.release()
  weibosemp.release()
  weibosemc.release()



def sig_usr2(signo, stack):
  global queueinfolog, weibolog, statelog
  print "sig_usr2"
  weibolog.flush()
  statelog.flush()
  queueinfolog.write('JsonQueue size: %d'%(jsonqueue.qsize()) + '\n')
  queueinfolog.write('WeiboQueue size: %d'%(weiboqueue.qsize()) + '\n')
  queueinfolog.flush()




def getjsonfile():
  global confmap, jsonsemc, jsonsemp, jsonhandler, jsonprocessor, \
      jsontransport, jsontfactory, jsonpfactory, jsonserver
  jsonserver.serve()




def jsongrab():
  global confmap, jsonsemc, jsonsemp, weibosemc, weibosemp, isexit
  while not isexit:
    jsonsemc.acquire()
    if isexit:
      break
    fname=jsonqueue.get()
    jsonsemp.release()
    print fname
    try:
      jsonlist=json.load(file(fname))['result']
      for item in jsonlist:
        weibo = weiboinfo()

        try:
          weibo.mblogid = item['mblogid']
        except:
          weibo.mblogid = None
        if weibo.mblogid == None:
          continue

        try:
          weibo.uid = str(item['uid'])
        except:
          weibo.uid = None
        
        try:
          weibo.rtnum = str(item['rtnum'])
        except:
          weibo.rtnum = None

        try:
          weibo.cmtnum = str(item['cmtnum'])
        except:
          weibo.cmtnum = None

        try:
          weibo.source = str(item['source'])
        except:
          weibo.source = None
          
        try:
          weibo.time = str(item['time'])
        except:
          weibo.time = None

        try:
          weibo.text = item['content']['text']
        except:
          weibo.text = None
        if weibo.text == None:
          continue
        
        try:
          atusers = item['content']['atUsers']
          weibo.atUsers = ':'.join(atusers.keys())
        except:
          weibo.atUsers = None

        if item.has_key('rt'):
          weibo.rt = True

          try:
            weibo.fromuid = str(item['rt']['fromuid'])
          except:
            weibo.fromuid = None

          try:
            weibo.rootuid = str(item['rt']['rootuid'])
          except:
            weibo.rootuid = None

          try:
            url = item['rt']['rturl']
            weibo.fromid = re.split('/', url)[3]
          except:
            weibo.fromid = None

          try:
            weibo.rootid = str(item['rt']['rootid'])
          except:
            weibo.rootid = None

          try:
            weibo.rootrtnum = str(item['rt']['rootrtnum'])
          except:
            weibo.rootrtnum = None

          try:
            weibo.rtreason = item['rt']['rtreason']
          except:
            weibo.rtreason = None
        else:
          weibo.rt = False
          
        weibosemp.acquire()
        if isexit:
          break
        weiboqueue.put(weibo)
        weibosemc.release()
        print weibo.mblogid, weibo.atUsers, weibo.uid, weibo.rtnum
    except Exception, e:
      statelog.write('Jsonfile %s grab error '%(fname)+str(e) + '\n')
      pass
    else:
      statelog.write('Jsonfile %s grab successful\n'%(fname))



def storeinfo():
  global isexit, weibosemc, weibosemp
  while not isexit:
    pass





def init():
  global confmap, jsonsemc, jsonsemp, weibosemc, weibosemp, jsonhandler, jsonprocessor, \
      jsontransport, jsontfactory, jsonpfactory, jsonserver, weibolog, statelog, queueinfolog, isexit

  isexit = False
  signal.signal(signal.SIGUSR1, sig_usr1)
  signal.signal(signal.SIGUSR2, sig_usr2)
  confmap = json.load(file("config.json"))

  weibolog = MyLog(confmap['weibologitem'], 0)
  statelog = MyLog(confmap['statelogitem'], 1)
  queueinfolog = MyLog(1)

  ret = weibolog.initFile(confmap['weibologdir'], confmap['weibologprefix'])
  if ret != 0:
    print 'weibolog init failed\n'
    return -1
  
  ret = statelog.initFile(confmap['statelogdir'], confmap['statelogprefix'])
  if ret != 0:
    print 'statelog init failed\n'
    return -1

  ret = queueinfolog.initFile(confmap['statelogdir'], confmap['queueinfologprefix'])
  if ret != 0:
    print 'queueinfolog init failed\n'
    return -1

  statelog.write('Server start ...\n')

  jsonsemp = threading.Semaphore(confmap["jsonqueuemax"])
  jsonsemc = threading.Semaphore(0)
  weibosemp = threading.Semaphore(confmap["weiboqueuemax"])
  weibosemc = threading.Semaphore(0)

  jsonhandler = SendJsonHandler()
  jsonprocessor = SendJson.Processor(jsonhandler)
  jsontransport = TSocket.TServerSocket(port=9085)
  jsontfactory = TTransport.TBufferedTransportFactory()
  jsonpfactory = TBinaryProtocol.TBinaryProtocolFactory()
  jsonserver = TServer.TSimpleServer(jsonprocessor, jsontransport, jsontfactory, jsonpfactory)
  
  return 0


def deinit():
  weibolog.close()
  queueinfolog.close()
  statelog.write('Server stop...\n')
  statelog.close()
  

def main():
  global threads

  ret = init()
  if ret != 0:
    print 'init failed\n'
    return 

  t1=threading.Thread(target=getjsonfile, args=())
  t2=threading.Thread(target=jsongrab, args=())
  t3=threading.Thread(target=storeinfo, args=())
  threads.extend((t1, t2, t3))

  for t in threads:
    t.start()

  threads[1].join()
  threads[2].join()

  deinit()
  sys.exit(0)



if __name__ == '__main__':
  main()
