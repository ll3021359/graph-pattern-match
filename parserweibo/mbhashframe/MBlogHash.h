/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MBlogHash_H
#define MBlogHash_H

#include <TProcessor.h>
#include "mbloghash_types.h"

namespace mbloghash {

class MBlogHashIf {
 public:
  virtual ~MBlogHashIf() {}
  virtual bool initHash() = 0;
  virtual void hashBlogId(std::vector<std::string> & _return, const std::vector<std::string> & inids) = 0;
};

class MBlogHashIfFactory {
 public:
  typedef MBlogHashIf Handler;

  virtual ~MBlogHashIfFactory() {}

  virtual MBlogHashIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MBlogHashIf* /* handler */) = 0;
};

class MBlogHashIfSingletonFactory : virtual public MBlogHashIfFactory {
 public:
  MBlogHashIfSingletonFactory(const boost::shared_ptr<MBlogHashIf>& iface) : iface_(iface) {}
  virtual ~MBlogHashIfSingletonFactory() {}

  virtual MBlogHashIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MBlogHashIf* /* handler */) {}

 protected:
  boost::shared_ptr<MBlogHashIf> iface_;
};

class MBlogHashNull : virtual public MBlogHashIf {
 public:
  virtual ~MBlogHashNull() {}
  bool initHash() {
    bool _return = false;
    return _return;
  }
  void hashBlogId(std::vector<std::string> & /* _return */, const std::vector<std::string> & /* inids */) {
    return;
  }
};


class MBlogHash_initHash_args {
 public:

  MBlogHash_initHash_args() {
  }

  virtual ~MBlogHash_initHash_args() throw() {}


  bool operator == (const MBlogHash_initHash_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MBlogHash_initHash_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MBlogHash_initHash_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MBlogHash_initHash_pargs {
 public:


  virtual ~MBlogHash_initHash_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MBlogHash_initHash_result__isset {
  _MBlogHash_initHash_result__isset() : success(false) {}
  bool success;
} _MBlogHash_initHash_result__isset;

class MBlogHash_initHash_result {
 public:

  MBlogHash_initHash_result() : success(0) {
  }

  virtual ~MBlogHash_initHash_result() throw() {}

  bool success;

  _MBlogHash_initHash_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const MBlogHash_initHash_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MBlogHash_initHash_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MBlogHash_initHash_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MBlogHash_initHash_presult__isset {
  _MBlogHash_initHash_presult__isset() : success(false) {}
  bool success;
} _MBlogHash_initHash_presult__isset;

class MBlogHash_initHash_presult {
 public:


  virtual ~MBlogHash_initHash_presult() throw() {}

  bool* success;

  _MBlogHash_initHash_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MBlogHash_hashBlogId_args__isset {
  _MBlogHash_hashBlogId_args__isset() : inids(false) {}
  bool inids;
} _MBlogHash_hashBlogId_args__isset;

class MBlogHash_hashBlogId_args {
 public:

  MBlogHash_hashBlogId_args() {
  }

  virtual ~MBlogHash_hashBlogId_args() throw() {}

  std::vector<std::string>  inids;

  _MBlogHash_hashBlogId_args__isset __isset;

  void __set_inids(const std::vector<std::string> & val) {
    inids = val;
  }

  bool operator == (const MBlogHash_hashBlogId_args & rhs) const
  {
    if (!(inids == rhs.inids))
      return false;
    return true;
  }
  bool operator != (const MBlogHash_hashBlogId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MBlogHash_hashBlogId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MBlogHash_hashBlogId_pargs {
 public:


  virtual ~MBlogHash_hashBlogId_pargs() throw() {}

  const std::vector<std::string> * inids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MBlogHash_hashBlogId_result__isset {
  _MBlogHash_hashBlogId_result__isset() : success(false) {}
  bool success;
} _MBlogHash_hashBlogId_result__isset;

class MBlogHash_hashBlogId_result {
 public:

  MBlogHash_hashBlogId_result() {
  }

  virtual ~MBlogHash_hashBlogId_result() throw() {}

  std::vector<std::string>  success;

  _MBlogHash_hashBlogId_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const MBlogHash_hashBlogId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MBlogHash_hashBlogId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MBlogHash_hashBlogId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MBlogHash_hashBlogId_presult__isset {
  _MBlogHash_hashBlogId_presult__isset() : success(false) {}
  bool success;
} _MBlogHash_hashBlogId_presult__isset;

class MBlogHash_hashBlogId_presult {
 public:


  virtual ~MBlogHash_hashBlogId_presult() throw() {}

  std::vector<std::string> * success;

  _MBlogHash_hashBlogId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MBlogHashClient : virtual public MBlogHashIf {
 public:
  MBlogHashClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  MBlogHashClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool initHash();
  void send_initHash();
  bool recv_initHash();
  void hashBlogId(std::vector<std::string> & _return, const std::vector<std::string> & inids);
  void send_hashBlogId(const std::vector<std::string> & inids);
  void recv_hashBlogId(std::vector<std::string> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MBlogHashProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<MBlogHashIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (MBlogHashProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_initHash(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_hashBlogId(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MBlogHashProcessor(boost::shared_ptr<MBlogHashIf> iface) :
    iface_(iface) {
    processMap_["initHash"] = &MBlogHashProcessor::process_initHash;
    processMap_["hashBlogId"] = &MBlogHashProcessor::process_hashBlogId;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~MBlogHashProcessor() {}
};

class MBlogHashProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MBlogHashProcessorFactory(const ::boost::shared_ptr< MBlogHashIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< MBlogHashIfFactory > handlerFactory_;
};

class MBlogHashMultiface : virtual public MBlogHashIf {
 public:
  MBlogHashMultiface(std::vector<boost::shared_ptr<MBlogHashIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MBlogHashMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MBlogHashIf> > ifaces_;
  MBlogHashMultiface() {}
  void add(boost::shared_ptr<MBlogHashIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool initHash() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->initHash();
      } else {
        ifaces_[i]->initHash();
      }
    }
  }

  void hashBlogId(std::vector<std::string> & _return, const std::vector<std::string> & inids) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->hashBlogId(_return, inids);
        return;
      } else {
        ifaces_[i]->hashBlogId(_return, inids);
      }
    }
  }

};

} // namespace

#endif
